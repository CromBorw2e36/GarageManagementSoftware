@using GarageManagementSoftware.Models.ENITTY.DataSystem
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Danh sách tài khoản";
    ViewData["navItemActive"] = "nav_id_account";
    Layout = "~/Views/Shared/_ViewAdminstrator.cshtml";
    var InputMaster = ViewData["InputMaster"] as List<AccountModel>;
}




<div class="page-header">
    <h3 class="fw-bold mb-3">Tài khoản</h3>
    <ul class="breadcrumbs mb-3">
        <li class="nav-home">
            <a href="#">
                <i class="icon-home"></i>
            </a>
        </li>
        <li class="separator">
            <i class="icon-arrow-right"></i>
        </li>
        <li class="nav-item">
            <a href="#">Hệ thống</a>
        </li>
        <li class="separator">
            <i class="icon-arrow-right"></i>
        </li>
        <li class="nav-item">
            <a href="#">Tài khoản</a>
        </li>
    </ul>
</div>
<div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
    <div class="ms-md-auto py-2 py-md-0">
        <a href="#" class="btn btn-round">Thêm mới</a>
        <a href="#" class="btn btn-round">Chi tiết</a>
        <a href="#" class="btn btn-round">Xóa</a>
    </div>
</div>




<div id="gridContainer"></div>


<script>
    $(() => {
        // Chuyển đổi dữ liệu từ ViewData sang JSON
        let inputData = @Html.Raw(JsonConvert.SerializeObject(ViewData["InputMaster"]));

        enum actionCode {
            ADD = "ADD",
            EDIT = "EDIT",
            VIEW = "VIEW",
            DELETE = "DELETE",
        }

        class AccountSerivce {



            columnsDataGrid; // columns of data grid

            gridContainerRef;// Ref data grid

            constructor() {
                this.columnsDataGrid = [
                    {
                        dataField: "name",
                        caption: "Tài khoản",
                        align: 'left',
                    },
                    {
                        dataField: "password",
                        caption: "Mật khẩu",
                        align: 'left',
                    },
                    {
                        dataField: "create_at",
                        caption: "Ngày tạo",
                        align: 'center',
                    }
                ]
                this.gridContainerRef = undefined;

            }

            getDataGrid() {
                gridContainerRef = $('#gridContainer');
            }

            getSelectedRowsData() {
                if (this.gridContainerRef == undefined) {
                    return [];
                } else {
                    let selectedData = this.gridContainerRef.dxDataGrid('instance').getSelectedRowsData(); //  dòng dữ liệu trong grid
                    return selectedData;
                }
            }

            onLoadDataSource(data) {
                if (this.gridContainerRef == undefined) {
                    this.getDataGrid();
                }
                this.gridContainerRef.dxDataGrid({
                    dataSource: data,
                    keyExpr: "code",
                    columns: this.columnsDataGrid,
                    selection: { mode: 'single', },
                    hoverStateEnabled: true,
                    showBorders: true,
                    focusedRowEnabled: true,
                    onSelectionChanged(selectedItems) {
                        const data = selectedItems.selectedRowsData[0];
                        console.log(selectedItems)
                        console.log(data)
                    },
                });
            }

            handleActionClick(p) {
                const { code, data } = p;
                switch (code) {
                    case "ADD": {
                        InsertItem();
                        break;
                    }
                    case "EDIT": {
                        EditItem();
                        break;
                    }
                    case "VIEW": {

                        break;
                    }
                    case "DELETE": {

                        break;
                    }
                }
            }

            genEventListenterAddItem(idBtn, codeAciton) {
                if (!idBtn) { alert('Lỗi cấu hình phần mềm ở hàm genEventListenterAddItem'); }
                else { $(`#${idBtn}`).on('click', this.handleActionClick({ code: codeAciton, data: undefined }) }
            }
        }

        const accountSerivce = new AccountSerivce();
        accountSerivce.onLoadDataSource(inputData);
    });
</script>





@* <table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Tài khoản</th>
            <th scope="col">Mật khẩu</th>
            <th scope="col">Ngày tạo</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < InputMaster?.Count; i++)
        {
            <tr>
                <th scope="row">@(i + 1)</th>
                <td>@InputMaster[i]?.name</td>
                <td>@InputMaster[i]?.password</td>
                <td>@InputMaster[i]?.create_at?.ToString("dd/MM/yyyy")</td>
            </tr>
        }
    </tbody>
</table> *@

